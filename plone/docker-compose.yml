version: "3.7"
services:

  plone-backend:
    image: plone/plone-backend:6.0.0a3
    environment:
      RELSTORAGE_DSN: "host='db' dbname='plone' user='plone'  password='plone'"
    ports:
    - "8080:8080"
    depends_on:
    - db
    networks:
    - traefik-public
    - backend
    deploy:
      replicas: ${PLONE_REPLICAS?Unset}
      resources:
        limits:
          cpus: '1'
          memory: 512M
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 30s
        window: 120s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        # SERVICE
        - traefik.http.services.plone.loadbalancer.server.port=8080
        # ZMI
        - traefik.http.routers.plone-zmi.rule=Host(`${PLONE_ZMI_DOMAIN?Unset}`)
        - traefik.http.routers.plone-zmi.entrypoints=https
        - traefik.http.routers.plone-zmi.tls=true
        - traefik.http.routers.plone-zmi.tls.certresolver=le
        - traefik.http.routers.plone-zmi.service=plone
        - traefik.http.middlewares.plone-zmi.addprefix.prefix=/VirtualHostBase/https/${PLONE_ZMI_DOMAIN?Unset}/VirtualHostRoot
        - traefik.http.routers.plone-zmi.middlewares=gzip, plone-zmi
        # plone
        - traefik.http.routers.plone-cms.rule=Host(`${PLONE_CMS_CLASSIC_DOMAIN?Unset}`)
        - traefik.http.routers.plone-cms.entrypoints=https
        - traefik.http.routers.plone-cms.tls=true
        - traefik.http.routers.plone-cms.tls.certresolver=le
        - traefik.http.routers.plone-cms.service=plone
        - traefik.http.middlewares.plone-cms.addprefix.prefix=/VirtualHostBase/https/${PLONE_CMS_CLASSIC_DOMAIN?Unset}/Plone/VirtualHostRoot
        - traefik.http.routers.plone-cms.middlewares=gzip, plone-cms

  db:
    image: postgres
    environment:
      POSTGRES_USER: plone
      POSTGRES_PASSWORD: plone
      POSTGRES_DB: plone
    networks:
    - backend
    volumes:
      - "pgdb:/var/lib/postgresql/data"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
      placement:
        constraints:
          - node.labels.plone.db.volume==true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  traefik-public:
    external: true
    driver: overlay
  backend:
    driver: overlay

volumes:
  pgdb:
    driver_opts:
      type: none
      device: ${PLONE_DB_VOLUME_PATH?Unset}
      o: bind